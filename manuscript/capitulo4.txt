-# Parte II - Mecánica del lenguaje

# Capítulo 4 - Comparadores

{:: encoding="utf-8" /}
{footnotes-off}


## *[Operadores de Comparación](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/Comparison_Operators)*

Muchos de los comparadores, mayor que, menor que, igual que, etc... ya los conocemos. Pero en JavaScript tenemos un comparador adiccional, que nos permite comparar entre dos elementos, no solo por su valor, también por su tipología.


{lang=js}
~~~~~~~
var mayorQue = 100 > 10;
var menorQue = 10 < 100;
var mayorIgual = 100 >= 10;
var menorIgual = 10 <= 100;
var igual = 10 == 10;
var igualTotalmente = 10 === 10; // Ojo! Usamos también ===
var noIgual = 100 != 10;
~~~~~~~

Como regla general, será imperativo utilizarlo siempre que comparemos entre valores el *===*, ya que debemos asegurarnos que no nos den "gato por liebre", confirmando que son iguales ambos datos en valor y tipo de dato.

Veamos el siguiente ejemplo:

{lang=js}
~~~~~~~
var igual = 10 == 10; // true
var igualCadena = 10 == "10"; //true
var igualTotalmente = 10 === 10; // true
var igualTotalmenteCadena = 10 === "10"; //false

var noIgual = 100 != 10; // true
var noIgualCadena = 100 != "100"; // false
var noIgualTotalmente = 100 !== 10; // true
var noIgualTotalmenteCadena = 100 !== "100"; // true
~~~~~~~

## *[Operadores Lógicos](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/Operadores_l%C3%B3gicos)*

Podemos concatenar validaciones y así evaluar expresiones más complejas.

En JavaScript disponemos de *&&* _(todo debe resolverse como verdadero)_ y *||* _(Al menos uno de los elementos debe ser verdadero)_

{pagebreak}

- **AND(&&)**

    {lang=js}
    ~~~~~~~
    console.log(true && true);      // true
    console.log(true && false);     // false
    console.log(false && false);    // false
    console.log(false && true);     // false
    ~~~~~~~

- **OR(||)**

    {lang=js}
    ~~~~~~~
    console.log(true || true);      // true
    console.log(true || false);     // true
    console.log(false || false);    // false
    console.log(false || true);     // true
    ~~~~~~~

Podemos también utilizar lo aprendido hasta ahora con operaciones matemáticas:

{lang=js}
~~~~~~~
var ex1 = true && true;         // true
var ex2 = (2 == 2) && (3 >= 6); // false
var ex3 = (2>3) || (17 <= 40);  // true
var ex4 = false || false;       // false
~~~~~~~

## Todo puede ser booleano

En JavaScript todo puede ser comparado en términos booleanos, especialmente si hacemos uso de la función *[Boolean()](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Objetos_globales/Boolean)*.

En general podemos saber cómo responderá JavaScript, si tenemos en cuenta el *"valor real"* de la expresión que deseamos validar.

Por ejemplo, una cadena de texto vacía *("")* no aportará valor real, por lo que será *false*.

Importante remarcar que el *0* y *-0* son false

- **Valor "real" es _true_:**

    {lang=js}
    ~~~~~~~
    console.log("valor boleano de \"JS!\":", Boolean("JS!\"));
    console.log("valor boleano de 1235:", Boolean(1235));
    console.log("valor boleano de -1235:", Boolean(-1235));
    console.log("valor boleano de un objeto:", Boolean({saludo: "hola"}));
    console.log("valor boleano de un array:", Boolean(["platano", -1, false]));
    console.log("valor boleano de un array:", Boolean(function(){}));
    ~~~~~~~

{pagebreak}

- **Sin valor "real" es _false_:**

    {lang=js}
    ~~~~~~~
    console.log("valor boleano de \"\":", Boolean(""));
    console.log("valor boleano de 0:", Boolean(0));
    console.log("valor boleano de -0:", Boolean(-0));
    console.log("valor boleano de null:", Boolean(null));
    console.log("valor boleano de undefined:", Boolean(undefined));
    console.log("valor boleano de NaN:", Boolean(NaN));
    ~~~~~~~

## Asignación por igualdad

Una manera ágil y dinámica de asignar valor a las variables, es haciendo uso de la asignación por igual. Básicamente almacenamos el resultado booleano de una comparación en una variable que podremos utilizar más adelante.

{lang=js}
~~~~~~~
var administrador = 'Yo mismo';
var esAdministrador = (administrador === 'Yo mismo');
console.log(esAdministrador); // true
~~~~~~~

## *[If](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else)*

Como ya vimos en pseudocódigo, una de las estructuras más útiles a la hora de gestionar el flujo de nuestra aplicación es el uso de condicionales.

*If* nos permite evaluar una condición y actuar en consecuencia.

Las instrucciones que se encuentran entre corchetes, se ejecutan solo cuando la condición se cumple.


I> #### Gestiona la complejidad
I>
I> Dentro de una estructura condicional podemos meter más estructuras condicionales, además de
I> otras estructuras típicas del lenguaje... esto se conoce como *[anidación](https://es.wikipedia.
I> org/wiki/Anidamiento_(inform%C3%A1tica))*.
I>
I> Cuando la anidación es desmesurada y poco óptima suele elevarse mucho la [complejidad ciclomática
I> ](https://es.wikipedia.org/wiki/Complejidad_ciclom%C3%A1tica) de nuestro código. De esto
I> hablaremos en próximos capítulos.

{lang=js}
~~~~~~~
if(1 === 1){
	console.log("1 es igual a 1 y por eso me ejecuto")
}

if(1 === "1"){
	console.log("No son del mismo tipo y por eso... este texto jamás será mostrado en la consola.")
}
~~~~~~~

## *[If... else](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else)*

En ciertas ocasiones, necesitaremos que nuestro script elija entre dos caminos en función de si una premisa es *verdadera* o *falsa*, por eso JavaScript nos permite utilizar *else*.

El programa solo puede ejecutar una de las dos opciones, por tanto una parte del código quedará sin ejecutarse.

{lang=js}
~~~~~~~
console.log("pase lo que pase... esto se ejecutará")
if (true) {
    console.log("true, por eso me ejecuto");
} else {
    console.log("false, por eso me ejecuto");
}
console.log("pase lo que pase... esto se ejecutará también")
~~~~~~~


## *[Else if...](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/if...else)*

Cuando necesitemos verificar diversas opciones lo más fácil es utilizar *else if*, así evitamos tener que anidar en exceso.

Es importante recordar que la primera condición válida será la que use el interprete (navegador), y que ignorará todas las demás.

{lang=js}
~~~~~~~
var condicion = 2;
if (condicion == 1) {
    console.log("1, por eso me ejecuto");
} else if (condicion == 2){
    console.log("2, por eso me ejecuto");
} else {
    console.log("no es 1 o 2, por eso me ejecuto");
}
~~~~~~~


## *[Switch](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Sentencias/switch)*

JavaScript dispone de una opción más para crear estructuras condicionales.
*Switch* permite crear estructuras más optimizadas para cubrir un amplio abanico de casos posibles.

Por otra parte *Switch* tiene varias desventajas notables:

* No tiene una sintaxis sencilla
* Es importante utilizar y comprender conceptos propios como *case*, *break* o *default*.
* En ocasiones puede ser difícil de depurar.
* Erróneamente se piensa que *Switch* es exageradamente más rápido que *if-else*, aunque una *[simple prueba demuestra lo contrario](http://jsben.ch/#/o0UDx)*.

- **Entendiendo la estructura:**

    {lang=js}
    ~~~~~~~
	switch(expresión) {
	    case n1:
	        //Código
	        break;
	    case n2:
	        //Código
	        break;
	    default:
	        //Código
	}
    ~~~~~~~



- **Trabajando con "casos únicos":**

    {lang=js}
    ~~~~~~~
	var nombre = "";
	switch (nombre) {
	  case "Pepe":
	    console.log("Hola Pepe");
	    break;
	  case "Luis":
	    console.log("Hola Luis");
	    break;
	  case "Antonio":
	    console.log("Hola Antonio");
	    break;
	  default:
	    console.log('Ninguno de los nombres que pensamos... es '+nombre);
	}
    ~~~~~~~

{pagebreak}

- **Trabajando con "múltiples coincidencias":**

    {lang=js}
    ~~~~~~~
	var nombre = "";
	switch (nombre)
	{
	   case "Pepe":
	   case "Luis":
	   case "Antonio":
	       alert('Hola '+nombre);
	       break;

	   default:
	       console.log('Ninguno de los nombres que pensamos... es '+nombre);
	}
    ~~~~~~~

## *[Operador Ternario](https://developer.mozilla.org/es/docs/Web/JavaScript/Referencia/Operadores/Conditional_Operator)*

El *operador ternario (?:)* nos ofrece una manera propia de hacer estructuras condicionales.

Este operador simplifica mucho la sintaxis propia de los condicionales, pero se desaconseja su uso para operaciones o evaluaciones múltiples.

I> Si estas empezando con JavaScript, debes tener en cuenta, que es un operador que resulta difícil
I> de recordar al principio. Siendo bastante común su uso especialmente en proyectos desarrollados
I> con Node.js.

### Estructura

- **Entendiendo la estructura:**

    {lang=text}
    ~~~~~~~
	condicion ? expresion1 : expresion2
    ~~~~~~~

- **Múltiples expresiones (desaconsejado):**

    {lang=text}
    ~~~~~~~
	condicion ? (
		expresion1,
		expresion2,
		otraexpresion
	) : (
		expresion1,
		expresion2,
		otraexpresion
	);
    ~~~~~~~

{pagebreak}

- **Evaluaciones múltiples (muy desaconsejado):**

    {lang=text}
    ~~~~~~~
    condicion ? expresion1 : condicion2 ? expresion1 : expresion2;
    ~~~~~~~



### Ejemplos

- **Sencillo:**

    {lang=js}
    ~~~~~~~
	var esMiembro = true;
	console.info("El pago son  " + (esMiembro ? "20.00€" : "50.00€"));
    ~~~~~~~

- **Evaluación múltiple (muy desaconsejado):**

    {lang=js}
    ~~~~~~~
	var esMiembro = true;
	var esAdulto = true;
	console.info(esMiembro ? "El pago son 20.00€" : esAdulto ? "Puedes enviar la solicitud cuando quieras" : "Tienes que esperar aún. Lo siento.");
    ~~~~~~~

- **Múltiples expresiones (desaconsejado):**

    {lang=js}
    ~~~~~~~
	var mensaje,
	esMiembro = true;

	esMiembro ? (
		mensaje = "El pago son 20.00€",
		console.info(mensaje)
	) : (
		mensaje = "El pago son 50.00€",
		console.info(mensaje)
	);
    ~~~~~~~
